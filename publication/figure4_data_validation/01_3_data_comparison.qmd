---
title: "Data comparison"
author: "Kaixin Zhu"
date: "`r Sys.Date()`"
format:
  pdf:
    pdf-engine: xelatex
    documentclass: scrartcl
    toc: true
    number-sections: true
    include-in-header:
      text: |
        \usepackage{ctex}
---

# 简介
相较v2的变化：计算微博移动系数过程中筛选城市

# 环境初始化
```{r}
#| label: setup
#| output: false

library(knitr)
rdir <- "~/SMobility_paper_v2/08_data_comparison/"
knitr::opts_knit$set(root.dir = rdir)

library(tidyverse)
library(lubridate)
library(data.table)
library(sf)
library(janitor)
library(zoo)
library(ggtext)
library(RColorBrewer)
library(patchwork)
options(datatable.print.nrows = 5)
```


```{r color_setting}
# 查看颜色盘
# display.brewer.all(
#   # "div", "qual", "seq"
#   type = "all", 
#   # Number of different colors in the palette, minimum 3, maximum depending on palette
#   n = NULL 
#   )

# 选择颜色
display.brewer.pal(n = 9, name = "Set1")
pal <- brewer.pal(n = 9, name = "Set1")
pal
```

# 读入数据
```{r}
#| label: import_filepath_1
#| include: false

ifile_CMI <- 
  "~/SMobility_paper_v2/02_data_validation/data/03_a_baidu_city_movement_intensity/City_Movement_Intensity_202001-202004.csv"

ifile_checkins <-
  "~/weibo/17_checkins_cleaning/03_full_sample/data/06_checkins_filter.csv.gz"

# ifile_pois_classify <-
#   "~/weibo/03_POIs/data/pois_weibo_classify_v2.csv"

ifile_city_adm <-
  "~/Administrative_division/adm_for_join/result/01_adm_for_join.csv"

ifile_census_city <-
  "~/Administrative_division/census_city_pr_level/result/01_census_city_level.csv"

ifile_city_abnormal <-
  "data/city_abnormal.csv"

odir_result <-
  "result/"

odir_data <-
  "data/"
```


```{r}
#| label: import_data_1

# Baidu CMI (city movement index)
CMI <-
  fread(ifile_CMI, header = T) %>%
  setnames("GbCity_EN", "city") %>%
  melt(id.vars = "city",
       variable.name = "date",
       value.name = "CMI") %>%
  .[, date := ymd(date)] %>%
  .[, adcode := str_sub(city, start = -6, end = -1)] %>%
  .[order(adcode, date)]

checkins <-
  fread(ifile_checkins,
        select = c(userid = "character",
                   created_at = "Date",
                   city = "character",
                   # category_name = "character",
                   category_google = "character"))

# pois_classify <-
#   fread(ifile_pois_classify)

city_adm <-
  fread(ifile_city_adm,
        colClasses=c("character"))

census_city <-
  fread(ifile_census_city) %>%
  .[, .(native, pop_2020)]

# 每个城市有2020/01/01-2020/05/02的每日CMI数据
CMI[1:5]
```
注：CMI记录了每个城市每天的出行人数占比（出行强度），是一个无量纲数据。在后续需要对CMI聚合至省级或国家级的时候，可以先把CMI数据进行归一化，然后按照2020年人口数量对CMI数据进行加权聚合。

# 整理行政区划和人口数据
```{r}
#| label: data_process_1

adm_census <-
  merge(city_adm,
        census_city,
        all.x = T,
        by.x = "ct_name_2",
        by.y = "native") %>%
  .[, pop_2020_prop_na := pop_2020/sum(pop_2020, na.rm = T)] %>%
  .[, pop_2020_prop_pr := pop_2020/sum(pop_2020, na.rm = T), by = .(pr_name)] %>%
  .[order(ct_adcode)]

adm_census[1:5]
```

# 计算微博移动系数
## 计算每日各城市出行人数比例
```{r}
#| label: calculate_usercount_travel

# 去除以下地点的打卡
exclude_category <-
  c("", "Residential", "Others", "Education")

# 定义时间段
period_focus <- c(ymd("2020-01-01"):ymd("2020-05-02"))
period_before_covid <- c(ymd("2020-01-01"):ymd("2020-01-19"))


checkins_nonres <-
  checkins[created_at %in% period_focus] %>%
  .[!(category_google %in% exclude_category)]

usercount <-
  checkins_nonres[, .(usercount = uniqueN(userid)), 
                  by = .(created_at, city)] %>%
  .[order(city, created_at)]

usercount[1:5]
```

## 筛选城市
```{r}
#| label: filter_city

city_abnor <- fread(ifile_city_abnormal)

num_checkins <-
  checkins_nonres[, .(num_checkins = .N), by = .(city)] %>%
  .[order(-num_checkins)]

# 筛选样本量足够的城市，去除异常值城市
usercount_filter <-
  usercount %>%
  .[city %in% num_checkins[num_checkins > 3000, city]] %>%
  .[!(city %in% city_abnor[, city])]

# 数据集中包含的城市数量
usercount_filter$city %>% uniqueN()
```

## 归一化处理
```{r}
#| label: nor_weibo

userprop_nor <-
  usercount_filter[, userprop_nor := 
              (usercount-min(usercount))/(max(usercount)-min(usercount)),
            by = .(city)]
```
注：这里直接使用“出行人数”代替“出行人数比例”，考虑到后续还需要进行归一化计算，两者计算结果一致。


## 连接人口和行政区划数据
```{r}
#| label: join_adm_census

userprop_nor_pop <-
  merge(userprop_nor,
        adm_census,
        all.x = T,
        by.x = "city",
        by.y = "city_join")

# 未能连接成功的数据
userprop_nor_pop[city_pinyin == "", unique(city)]
```

## 加权聚合至省级和国家级
```{r}
#| label: aggregate_weibo

# city level
userprop_city_nor <-
  userprop_nor_pop[, .(created_at, 
                       city, 
                       city_pinyin, 
                       userprop_nor_city = userprop_nor)]

userprop_city_nor[1:5]


# province level
userprop_pr_nor <-
  userprop_nor_pop[, .(userprop_nor_pr = 
                         sum(userprop_nor*pop_2020_prop_pr, na.rm = T)),
                   by = .(created_at, pr_join, pr_pinyin)] %>%
  .[order(pr_join, created_at)]

userprop_pr_nor[1:5]


# national level
userprop_na_nor <-
  userprop_nor_pop[, .(userprop_nor_na = 
                         sum(userprop_nor*pop_2020_prop_na, na.rm = T)),
                   by = .(created_at)] %>%
  .[order(created_at)]

userprop_na_nor[1:5]
```

## 7天滑动平均处理
```{r}
#| label: 7MA_weibo

userprop_city_nor[order(city, created_at),
                  userprop_nor_city_7MA := 
                    rollmean(userprop_nor_city, k = 7, fill = NA),
                  by = .(city, city_pinyin)]

userprop_pr_nor[order(pr_join, created_at),
                userprop_nor_pr_7MA := 
                  rollmean(userprop_nor_pr, k = 7, fill = NA),
                by = .(pr_join, pr_pinyin)]

userprop_na_nor[order(created_at),
                userprop_nor_na_7MA := 
                  rollmean(userprop_nor_na, k = 7, fill = NA)]
```

## 计算相对值
```{r}
#| label: relative_value_weibo

# city level
baseline_raw_city <-
  userprop_city_nor %>%
  .[created_at %in% period_before_covid] %>%
  .[, .(baseline_raw = median(userprop_nor_city, na.rm = T)), by = .(city)]

baseline_7MA_city <-
  userprop_city_nor %>%
  .[created_at %in% period_before_covid] %>%
  .[, .(baseline_7MA = median(userprop_nor_city_7MA, na.rm = T)), by = .(city)]

userprop_city_relative <-
  merge(userprop_city_nor,
        baseline_raw_city,
        all.x = T,
        by = "city") %>%
  merge(baseline_7MA_city,
        all.x = T,
        by = "city") %>%
  .[, userprop_relative := userprop_nor_city/baseline_raw-1] %>%
  .[, userprop_7MA_relative := userprop_nor_city_7MA/baseline_7MA-1]

# province level
baseline_raw_pr <-
  userprop_pr_nor %>%
  .[created_at %in% period_before_covid] %>%
  .[, .(baseline_raw = median(userprop_nor_pr, na.rm = T)), by = .(pr_join)]

baseline_7MA_pr <-
  userprop_pr_nor %>%
  .[created_at %in% period_before_covid] %>%
  .[, .(baseline_7MA = median(userprop_nor_pr_7MA, na.rm = T)), by = .(pr_join)]

userprop_pr_relative <-
  merge(userprop_pr_nor,
        baseline_raw_pr,
        all.x = T,
        by = "pr_join") %>%
  merge(baseline_7MA_pr,
        all.x = T,
        by = "pr_join") %>%
  .[, userprop_relative := userprop_nor_pr/baseline_raw-1] %>%
  .[, userprop_7MA_relative := userprop_nor_pr_7MA/baseline_7MA-1]

# national level
baseline_raw_na <-
  userprop_na_nor %>%
  .[created_at %in% period_before_covid] %>%
  .[, .(baseline_raw = median(userprop_nor_na, na.rm = T))]

baseline_7MA_na <-
  userprop_na_nor %>%
  .[created_at %in% period_before_covid] %>%
  .[, .(baseline_7MA = median(userprop_nor_na_7MA, na.rm = T))]

userprop_na_relative <-
  userprop_na_nor[, ':='(baseline_raw = baseline_raw_na$baseline_raw,
                         baseline_7MA = baseline_7MA_na$baseline_7MA)] %>%
  .[, userprop_relative := userprop_nor_na/baseline_raw-1] %>%
  .[, userprop_7MA_relative := userprop_nor_na_7MA/baseline_7MA-1]
```


```{r}
#| label: extract_abnormal_city
#| eval: false

# 挑选异常值的城市，保存
city_abnor <-
  userprop_city_relative[userprop_7MA_relative > 2] %>%
  .[, .(num = .N), by = .(city)]

city_abnor[num > 10]

fwrite(city_abnor,
       paste0(odir_data, "city_abnormal.csv"))
```


# 计算百度移动系数
## 归一化处理
```{r}
#| label: normalize_CMI

CMI_nor <-
  CMI[, CMI_nor := (CMI-min(CMI))/(max(CMI)-min(CMI)), by = .(city)]

CMI_nor[1:5]
```

## 连接人口、行政区划数据
```{r}
#| label: CMI_join

CMI_pop <-
  merge(CMI_nor,
        adm_census,
        all.x = T,
        by.x = "adcode",
        by.y = "adcode_CMI_join")

CMI_pop[1:5]

# 无法连接上pop_2020的城市
CMI_pop[is.na(pop_2020), unique(ct_name_2)]
```


## 加权聚合至省级和国家级
```{r}
#| label: aggregate_CMI

# city level
CMI_city_nor <-
  CMI_pop[, .(date, city_join, city_pinyin, CMI_nor_city = CMI_nor)]

# province level
CMI_pr_nor <-
  CMI_pop[, .(CMI_nor_pr = sum(CMI_nor*pop_2020_prop_pr, na.rm = T)), 
          by = .(date, pr_join, pr_pinyin)]

# national level
CMI_na_nor <-
  CMI_pop[, .(CMI_nor_na = sum(CMI_nor*pop_2020_prop_na, na.rm = T)), 
          by = .(date)]

CMI_city_nor[1:5]
CMI_pr_nor[1:5]
CMI_na_nor[1:5]
```

## 7天滑动平均处理
```{r}
#| label: 7MA_process

CMI_city_nor[order(city_join, date), 
             CMI_nor_city_7MA := rollmean(CMI_nor_city, k = 7, fill = NA), 
             by = .(city_join)]
CMI_pr_nor[order(pr_join, date), 
           CMI_nor_pr_7MA := rollmean(CMI_nor_pr, k = 7, fill = NA), 
           by = .(pr_join)]
CMI_na_nor[order(date),
           CMI_nor_na_7MA := rollmean(CMI_nor_na, k = 7, fill = NA)]
```

## 计算相对值
```{r}
#| label: relative_value_baidu

# city level
baseline_raw_CMI_city <-
  CMI_city_nor[date %in% period_before_covid] %>%
  .[, .(baseline_raw = median(CMI_nor_city, na.rm = T)), by = .(city_join)]

baseline_7MA_CMI_city <-
  CMI_city_nor[date %in% period_before_covid] %>%
  .[, .(baseline_7MA = median(CMI_nor_city_7MA, na.rm = T)), by = .(city_join)]

CMI_city_nor_relative <- 
  merge(CMI_city_nor,
        baseline_raw_CMI_city,
        all.x = T,
        by = "city_join") %>%
  merge(baseline_7MA_CMI_city,
        all.x = T,
        by = "city_join") %>%
  .[, CMI_relative := CMI_nor_city/baseline_raw-1] %>%
  .[, CMI_7MA_relative := CMI_nor_city_7MA/baseline_7MA-1]

# province level
baseline_raw_CMI_pr <-
  CMI_pr_nor[date %in% period_before_covid] %>%
  .[, .(baseline_raw = median(CMI_nor_pr, na.rm = T)), by = .(pr_join)]

baseline_7MA_CMI_pr <-
  CMI_pr_nor[date %in% period_before_covid] %>%
  .[, .(baseline_7MA = median(CMI_nor_pr_7MA, na.rm = T)), by = .(pr_join)]

CMI_pr_nor_relative <- 
  merge(CMI_pr_nor,
        baseline_raw_CMI_pr,
        all.x = T,
        by = "pr_join") %>%
  merge(baseline_7MA_CMI_pr,
        all.x = T,
        by = "pr_join") %>%
  .[, CMI_relative := CMI_nor_pr/baseline_raw-1] %>%
  .[, CMI_7MA_relative := CMI_nor_pr_7MA/baseline_7MA-1]

# national level
baseline_raw_CMI_na <-
  CMI_na_nor[date %in% period_before_covid] %>%
  .[, .(baseline_raw = median(CMI_nor_na, na.rm = T))]

baseline_7MA_CMI_na <-
  CMI_na_nor[date %in% period_before_covid] %>%
  .[, .(baseline_7MA = median(CMI_nor_na_7MA, na.rm = T))]

CMI_na_nor_relative <- 
  CMI_na_nor[, ':='(baseline_raw = baseline_raw_CMI_na$baseline_raw,
                    baseline_7MA = baseline_7MA_CMI_na$baseline_7MA)] %>%
  .[, CMI_relative := CMI_nor_na/baseline_raw-1] %>%
  .[, CMI_7MA_relative := CMI_nor_na_7MA/baseline_7MA-1]
```


# 市级比较验证
## 相关性分析
```{r}
#| label: comparison_city_level

CMI_weibo_city <-
  merge(CMI_city_nor_relative[, .(city_join,
                                  city_pinyin,
                                  date, 
                                  CMI_relative, 
                                  CMI_7MA_relative)],
        userprop_city_relative[, .(city,
                                   created_at,
                                   userprop_relative,
                                   userprop_7MA_relative)], 
        by.x = c("city_join", "date"),
        by.y = c("city", "created_at"))

cor_result_city <-
  CMI_weibo_city[, .(city_join, city_pinyin)] %>%
  unique() %>%
  .[, ':='(cor_value = NA_real_, p_value = NA_real_)]

for(i in 1:nrow(cor_result_city)){

  city_analysis <- cor_result_city[i, city_join]
  
  pearson_test <-
    cor.test(CMI_weibo_city[city_join == city_analysis, CMI_7MA_relative],
             CMI_weibo_city[city_join == city_analysis, userprop_7MA_relative],
             method = "pearson")
  
  cor_result_city[i, "cor_value"] <- pearson_test$estimate
  cor_result_city[i, "p_value"] <- pearson_test$p.value
}
```

## 提取结果
```{r}
#| label: extract_result_city_level

cal_sign <- function(i) {
  if(i < 1e-3){
    return("***")
  } else if(i < 1e-2){
    return("**")
  } else if(i < 5e-2){
    return("*") 
  } else {
    return("")
  }
}

cor_result_city_pop <-
  merge(cor_result_city,
        adm_census[, .(city_join, pop_2020)],
        all.x = T,
        by = "city_join")


# cor_result_city_filter <-
#   cor_result_city_pop[order(-pop_2020, -cor_value)] %>%
#   .[1:36]

# cor_result_city_filter <-
#   cor_result_city_pop[order(-cor_value)] %>%
#   .[1:36]

# cor_result_city_filter <-
#   cor_result_city_pop[city_join %in% num_checkins[1:54, city]] %>%
#   .[cor_value > 0.7] %>%
#   .[!(city_join %in% c("三亚",
#                        "大理白族自治州"))]


## 选取28个代表型城市
city_select <-
  fread("data/01_city_filter_50percent.csv")

cor_result_city_filter <-
  cor_result_city_pop[city_join %in% city_select$city_filter]

# add text
# cor_result_city_filter %>%
#   .[, ":="(cor_value_round = round(cor_value, digits = 2), 
#            p_value_round = round(p_value, digits = 2))] %>%
#   .[, label := paste0("r = ", str_pad(cor_value_round, 4, "right", "0"),
#                       "\np-value= ", p_value_round)]

# add text
cor_result_city_filter %>%
  .[, cor_value_round := round(cor_value, digits = 2)] %>%
  .[, sign_level := NA_character_]

for(i in 1:nrow(cor_result_city_filter)){
  cor_result_city_filter[i, sign_level := cal_sign(p_value)]
}

cor_result_city_filter[, label := 
                       paste0("*r*", " = ", cor_value_round, "<sup>",
                              sign_level, "</sup>")]

cor_result_city_filter
```

## 绘制结果
```{r}
#| label: plot_city_level
#| echo: false
#| warning: false
#| fig-width: 10
#| fig-height: 7
#| fig-dpi: 300

plotdata_city <-
  CMI_weibo_city[!is.na(CMI_relative) & 
                   !is.na(CMI_7MA_relative) &
                   !is.na(userprop_relative) &
                   !is.na(userprop_7MA_relative)] %>% 
  .[city_join %in% cor_result_city_filter[, city_join]] %>%  ###
  melt(id.vars = c("city_join", "city_pinyin", "date"))

plot_city <-
  ggplot(plotdata_city) +
  geom_line(mapping = aes(x = date, 
                          y = value, 
                          color = variable,
                          alpha = variable),
            linewidth = 0.3) +
  # geom_text(data = cor_result_city_filter,
  #           mapping = aes(x = ymd("2020-05-02"),
  #                         y = 0.6,
  #                         label = label),
  #           size = 2.5,
  #           lineheight = 1,
  #           hjust = "inward") +
  geom_richtext(data = cor_result_city_filter,
                mapping = aes(x = ymd("2020-05-10"), ### 
                              y = 0.7,
                              label = label),
                size = 3,
                lineheight = 1,
                hjust = "inward",
                fill = NA,
                label.color = NA) +
  geom_hline(yintercept = 0,
             color = "black",
             linetype = "solid",
             # size = 0.5,
             alpha = 0.5) +
  geom_vline(xintercept = ymd("2020-01-20"), # 官宣人传人
             color = "red",
             linetype = "dashed",
             linewidth = 0.3
             ) +
  # scale_color_manual(values = c("CMI_relative" = "darkorange",
  #                               "CMI_7MA_relative" = "darkorange",
  #                               "userprop_relative" = "deepskyblue",
  #                               "userprop_7MA_relative" = "deepskyblue"),
  #                    labels = c("CMI_relative" = "Baidu index",
  #                               "CMI_7MA_relative" = "Baidu index (7MA)",
  #                               "userprop_relative" = "Weibo index",
  #                               "userprop_7MA_relative" = "Weibo index (7MA)")) +
  # scale_alpha_manual(values = c("CMI_relative" = 0.2,
  #                               "CMI_7MA_relative" = 1,
  #                               "userprop_relative" = 0.2,
  #                               "userprop_7MA_relative" = 1),
  #                    labels = c("CMI_relative" = "Baidu index",
  #                               "CMI_7MA_relative" = "Baidu index (7MA)",
  #                               "userprop_relative" = "Weibo index",
  #                               "userprop_7MA_relative" = "Weibo index (7MA)")) +
  scale_color_manual(values = c("CMI_relative" = pal[5],
                                "CMI_7MA_relative" = pal[5],
                                "userprop_relative" = pal[3],
                                "userprop_7MA_relative" = pal[3]),
                     labels = c("CMI_relative" = "Baidu indice",
                                "CMI_7MA_relative" = "Baidu indice (7MA)",
                                "userprop_relative" = "Weibo indice",
                                "userprop_7MA_relative" = "Weibo indice (7MA)")) +
  scale_alpha_manual(values = c("CMI_relative" = 0.2,
                                "CMI_7MA_relative" = 1,
                                "userprop_relative" = 0.2,
                                "userprop_7MA_relative" = 1),
                     labels = c("CMI_relative" = "Baidu indice",
                                "CMI_7MA_relative" = "Baidu indice (7MA)",
                                "userprop_relative" = "Weibo indice",
                                "userprop_7MA_relative" = "Weibo indice (7MA)")) +
  scale_x_date(breaks = ymd(c("2020-01-01",
                              "2020-02-01",
                              "2020-03-03",
                              "2020-04-01",
                              "2020-05-01")),
               date_labels = "%b") +
  scale_y_continuous(breaks = seq(-1, 1, 0.5),
                     limits = c(-1, 1),
                     labels = c("-100%", "-50%", "0", "+50%", "+100%")) +
  facet_wrap(~ city_pinyin, ncol = 6) +
  labs(
       # x = "Date",
       y = "Relative change of mobility index") +
  theme_bw() +
  theme(axis.title.y = element_text(size = 12),
        axis.title.x = element_blank(),
        legend.title = element_blank(),
        legend.position = "bottom",
        legend.margin = margin(t = -5),
        legend.spacing.x = unit(0.5, 'cm'),
        legend.key.width = unit(1.5, "cm"),
        legend.text = element_text(size = 11),
        strip.background = element_rect(fill = NA, color = NA),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.spacing.x = unit(12, "pt")
        ) +
  guides(colour = guide_legend(nrow = 1, override.aes = list(linewidth = 1)))

plot_city
```
注：图中所有城市的p-value < 0.001
经观察发现，CMI有一个明显的周期性现象，在工作日时水平较高，而周末时水平降低。


```{r}
#| label: save_plot_city
#| include: false
#| eval: false

time <-
  paste0(str_replace(now(), " ", "_"))

filename_temp <- paste0("01_plot_comparison_city_level_", time, ".pdf")

ggsave(plot_city,
       device = cairo_pdf,
       filename = filename_temp,
       path = odir_result,
       width = 10,
       height = 7)
```


# 省级比较验证
## 相关性分析
```{r}
#| label: comparison_province_level

CMI_weibo_pr <-
  merge(CMI_pr_nor_relative[, .(pr_join,
                                pr_pinyin,
                                date,
                                CMI_relative,
                                CMI_7MA_relative)], 
        userprop_pr_relative[, .(pr_join,
                                 created_at,
                                 userprop_relative,
                                 userprop_7MA_relative)], 
        by.x = c("pr_join", "date"),
        by.y = c("pr_join", "created_at"))

cor_result_pr <-
  CMI_weibo_pr[, .(pr_join, pr_pinyin)] %>%
  unique() %>%
  .[, ':='(cor_value = NA_real_, p_value = NA_real_)]

for(i in 1:nrow(cor_result_pr)){

  pr_analysis <- cor_result_pr[i, pr_join]
  
  pearson_test <-
    cor.test(CMI_weibo_pr[pr_join == pr_analysis, CMI_7MA_relative],
             CMI_weibo_pr[pr_join == pr_analysis, userprop_7MA_relative],
             method = "pearson")
  
  cor_result_pr[i, "cor_value"] <- pearson_test$estimate
  cor_result_pr[i, "p_value"] <- pearson_test$p.value
}
```

## 提取结果
```{r}
#| label: extract_result_province_level

# 无需筛选，所有省级行政区都展示
cor_result_pr_filter <-
  cor_result_pr[order(-cor_value)]

# add text
cor_result_pr_filter %>%
  .[, cor_value_round := round(cor_value, digits = 2)] %>%
  .[, sign_level := NA_character_]

for(i in 1:nrow(cor_result_pr_filter)){
  cor_result_pr_filter[i, sign_level := cal_sign(p_value)]
}

cor_result_pr_filter[, label := 
                       paste0("*r*", " = ", 
                              str_pad(cor_value_round, 
                                            width = 4, 
                                            side = "right",
                                            pad = "0"),
                              "<sup>", sign_level, "</sup>")]


cor_result_pr_filter
```

## 绘制结果
```{r}
#| label: plot_province_level
#| echo: false
#| warning: false
#| fig-width: 10
#| fig-height: 7
#| fig-dpi: 300

plotdata_pr <-
  CMI_weibo_pr[!is.na(CMI_relative) & 
                   !is.na(CMI_7MA_relative) &
                   !is.na(userprop_relative) &
                   !is.na(userprop_7MA_relative)] %>% 
  .[pr_join %in% cor_result_pr_filter[, pr_join]] %>%  ###
  melt(id.vars = c("pr_join", "pr_pinyin", "date"))

plot_pr <-
  ggplot(plotdata_pr) +
  geom_line(mapping = aes(x = date, 
                          y = value, 
                          color = variable,
                          alpha = variable),
            linewidth = 0.3) +
  geom_richtext(data = cor_result_pr_filter,
                mapping = aes(x = ymd("2020-05-10"), ### 
                              y = 0.7,
                              label = label),
                size = 3,
                lineheight = 1,
                hjust = "inward",
                fill = NA,
                label.color = NA) +
  geom_hline(yintercept = 0,
             color = "black",
             linetype = "solid",
             # size = 0.5,
             alpha = 0.5) +
  geom_vline(xintercept = ymd("2020-01-20"), # 官宣人传人
             color = "red",
             linetype = "dashed",
             linewidth = 0.3
             ) +
  # scale_color_manual(values = c("CMI_relative" = "darkorange",
  #                               "CMI_7MA_relative" = "darkorange",
  #                               "userprop_relative" = "deepskyblue",
  #                               "userprop_7MA_relative" = "deepskyblue"),
  #                    labels = c("CMI_relative" = "Baidu index",
  #                               "CMI_7MA_relative" = "Baidu index (7MA)",
  #                               "userprop_relative" = "Weibo index",
  #                               "userprop_7MA_relative" = "Weibo index (7MA)")) +
  # scale_alpha_manual(values = c("CMI_relative" = 0.2,
  #                               "CMI_7MA_relative" = 1,
  #                               "userprop_relative" = 0.2,
  #                               "userprop_7MA_relative" = 1),
  #                    labels = c("CMI_relative" = "Baidu index",
  #                               "CMI_7MA_relative" = "Baidu index (7MA)",
  #                               "userprop_relative" = "Weibo index",
  #                               "userprop_7MA_relative" = "Weibo index (7MA)")) +
  scale_color_manual(values = c("CMI_relative" = pal[5],
                                "CMI_7MA_relative" = pal[5],
                                "userprop_relative" = pal[3],
                                "userprop_7MA_relative" = pal[3]),
                     labels = c("CMI_relative" = "Baidu indice",
                                "CMI_7MA_relative" = "Baidu indice (7MA)",
                                "userprop_relative" = "Weibo indice",
                                "userprop_7MA_relative" = "Weibo indice (7MA)")) +
  scale_alpha_manual(values = c("CMI_relative" = 0.2,
                                "CMI_7MA_relative" = 1,
                                "userprop_relative" = 0.2,
                                "userprop_7MA_relative" = 1),
                     labels = c("CMI_relative" = "Baidu indice",
                                "CMI_7MA_relative" = "Baidu indice (7MA)",
                                "userprop_relative" = "Weibo indice",
                                "userprop_7MA_relative" = "Weibo indice (7MA)")) +
  scale_x_date(breaks = ymd(c("2020-01-01",
                              "2020-02-01",
                              "2020-03-03",
                              "2020-04-01",
                              "2020-05-01")),
               date_labels = "%b") +
  scale_y_continuous(breaks = seq(-1, 1, 0.5),
                     limits = c(-1, 1),
                     labels = c("-100%", "-50%", "0", "+50%", "+100%")) +
  facet_wrap(~ pr_pinyin, ncol = 6) +
  labs(
       # x = "Date",
       y = "Relative change of mobility index") +
  theme_bw() +
  theme(axis.title.y = element_text(size = 12),
        axis.title.x = element_blank(),
        legend.title = element_blank(),
        legend.position = "bottom",
        legend.margin = margin(t = -5),
        legend.spacing.x = unit(0.5, 'cm'),
        legend.key.width = unit(1.5, "cm"),
        legend.text = element_text(size = 11),
        strip.background = element_rect(fill = NA, color = NA),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.spacing.x = unit(12, "pt")
        ) +
  guides(colour = guide_legend(nrow = 1, override.aes = list(linewidth = 1)))

plot_pr
```


```{r}
#| label: save_plot_province
#| include: false
#| eval: false

time <-
  paste0(str_replace(now(), " ", "_"))

filename_temp <- paste0("01_plot_comparison_province_level_", time, ".pdf")

ggsave(plot_pr,
       device = cairo_pdf,
       filename = filename_temp,
       path = odir_result,
       width = 10,
       height = 7)
```


# 国家级比较验证
## 相关性分析
```{r}
#| label: comparison_nation_level

CMI_weibo_na <-
  merge(CMI_na_nor_relative[, .(date, 
                                CMI_relative,
                                CMI_7MA_relative)], 
        userprop_na_relative[, .(created_at,
                                 userprop_relative,
                                 userprop_7MA_relative)], 
        by.x = c("date"),
        by.y = c("created_at"))

cor_result_na <-
  data.table(cor_value = NA_real_, p_value = NA_real_)
  
cor_result_na[, "cor_value"] <- pearson_test$estimate
cor_result_na[, "p_value"] <- pearson_test$p.value
```

## 提取结果
```{r}
#| label: extract_result_nation_level

# 无需筛选
cor_result_na_filter <-
  cor_result_na

# add text
# cor_result_na_filter %>%
#   .[, ":="(cor_value_round = round(cor_value, digits = 2), 
#            p_value_round = round(p_value, digits = 2))] %>%
#   .[, label := paste0("r= ", str_pad(cor_value_round, 4, "right", "0"),
#                       "\np-value= ", p_value_round)]

cor_result_na_filter %>%
  .[, cor_value_round := round(cor_value, digits = 2)] %>%
  .[, sign_level := NA_character_]

for(i in 1:nrow(cor_result_na_filter)){
  cor_result_na_filter[i, sign_level := cal_sign(p_value)]
}

cor_result_na_filter[, label := 
                       paste0("*r*", " = ", cor_value_round, "<sup>",
                              sign_level, "</sup>")]

cor_result_na_filter
```

## 绘制结果
```{r}
#| label: plot_nation_level
#| echo: false
#| warning: false
#| fig-width: 10
#| fig-height: 7
#| fig-dpi: 300

plotdata_na <-
  CMI_weibo_na[!is.na(CMI_relative) & 
                 !is.na(CMI_7MA_relative) &
                 !is.na(userprop_relative) &
                 !is.na(userprop_7MA_relative)] %>% 
  melt(id.vars = c("date"))

plot_na <-
  ggplot(plotdata_na) +
  geom_line(mapping = aes(x = date, 
                          y = value, 
                          color = variable,
                          alpha = variable),
            linewidth = 0.3) +
  # geom_text(data = cor_result_na_filter,
  #           mapping = aes(x = ymd("2020-05-02"),
  #                         y = 0.6,
  #                         label = label),
  #           size = 2.5,
  #           lineheight = 1,
  #           hjust = "inward") +
  geom_richtext(data = cor_result_na_filter,
                mapping = aes(x = ymd("2020-05-10"), ### 
                              y = 0.7,
                              label = label),
                size = 3,
                lineheight = 1,
                hjust = "inward",
                fill = NA,
                label.color = NA) +
  geom_hline(yintercept = 0,
             color = "black",
             linetype = "solid",
             # size = 0.5,
             alpha = 0.5) +
  geom_vline(xintercept = ymd("2020-01-20"), # 官宣人传人
             color = "red",
             linetype = "dashed",
             linewidth = 0.3
             ) +
  # scale_color_manual(values = c("CMI_relative" = "darkorange",
  #                               "CMI_7MA_relative" = "darkorange",
  #                               "userprop_relative" = "deepskyblue",
  #                               "userprop_7MA_relative" = "deepskyblue"),
  #                    labels = c("CMI_relative" = "Baidu index",
  #                               "CMI_7MA_relative" = "Baidu index (7MA)",
  #                               "userprop_relative" = "Weibo index",
  #                               "userprop_7MA_relative" = "Weibo index (7MA)")) +
  # scale_alpha_manual(values = c("CMI_relative" = 0.2,
  #                               "CMI_7MA_relative" = 1,
  #                               "userprop_relative" = 0.2,
  #                               "userprop_7MA_relative" = 1),
  #                    labels = c("CMI_relative" = "Baidu index",
  #                               "CMI_7MA_relative" = "Baidu index (7MA)",
  #                               "userprop_relative" = "Weibo index",
  #                               "userprop_7MA_relative" = "Weibo index (7MA)")) +
  scale_color_manual(values = c("CMI_relative" = pal[5],
                                "CMI_7MA_relative" = pal[5],
                                "userprop_relative" = pal[3],
                                "userprop_7MA_relative" = pal[3]),
                     labels = c("CMI_relative" = "Baidu indice",
                                "CMI_7MA_relative" = "Baidu indice (7MA)",
                                "userprop_relative" = "Weibo indice",
                                "userprop_7MA_relative" = "Weibo indice (7MA)")) +
  scale_alpha_manual(values = c("CMI_relative" = 0.2,
                                "CMI_7MA_relative" = 1,
                                "userprop_relative" = 0.2,
                                "userprop_7MA_relative" = 1),
                     labels = c("CMI_relative" = "Baidu indice",
                                "CMI_7MA_relative" = "Baidu indice (7MA)",
                                "userprop_relative" = "Weibo indice",
                                "userprop_7MA_relative" = "Weibo indice (7MA)")) +
  scale_x_date(breaks = ymd(c("2020-01-01",
                              "2020-02-01",
                              "2020-03-03",
                              "2020-04-01",
                              "2020-05-01")),
               date_labels = "%b") +
  scale_y_continuous(breaks = seq(-1, 1, 0.5),
                     limits = c(-1, 1),
                     labels = c("-100%", "-50%", "0", "+50%", "+100%")) +
  # facet_wrap(~ pr_join, ncol = 6) +
  labs(
       # x = "Date",
       y = "Relative change of mobility index") +
  theme_bw() +
  theme(axis.title.y = element_text(size = 12),
        axis.title.x = element_blank(),
        legend.title = element_blank(),
        legend.position = "bottom",
        legend.margin = margin(t = -5),
        legend.spacing.x = unit(0.5, 'cm'),
        legend.key.width = unit(1.5, "cm"),
        legend.text = element_text(size = 11),
        strip.background = element_rect(fill = NA, color = NA),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.spacing.x = unit(12, "pt")
        ) +
  guides(colour = guide_legend(nrow = 1, override.aes = list(linewidth = 1)))

plot_na
```

```{r}
#| label: save_plot_nation
#| include: false
#| eval: false

time <-
  paste0(str_replace(now(), " ", "_"))

filename_temp <- paste0("01_plot_comparison_national_level_", time, ".pdf")

ggsave(plot_na,
       device = cairo_pdf,
       filename = filename_temp,
       path = odir_result,
       width = 10,
       height = 7)
```


# 计算人口校正系数
```{r}
#| label: import_filepath_2
#| include: false

ifile_pop_yearbook_structure <-
  "~/SMobility_paper_v2/02_data_validation/data/04_yearbook2021/population_structure_yearbook2021.csv"

ifile_userinfo <-
  "~/weibo/01_userinfo/userinfo_merge/result/03_userinfo_merge_4cols.csv.gz"
```

## 读入数据
```{r}
#| label: import_data_2

pop_yearbook_structure <-
  fread(ifile_pop_yearbook_structure)

userinfo <-
  fread(ifile_userinfo) %>%
  .[!is.na(gender) & !is.na(age)]
```

## 数据预处理
```{r}
#| label: data_preprocess_2

exclude_location <-
  c("海外", "其他", "香港", "澳门", "台湾", "")

userinfo <-
  userinfo %>%
  .[, age_group := fcase(age >= 0 & age <= 14, "pop_0_14",
                         age >= 15 & age <= 64, "pop_15_64",
                         age >= 65 & age <= 90, "pop_65_above",
                         default = NA)] %>% 
  .[!is.na(age_group)] %>%
  .[str_detect(location, " "), located_pr := str_split_i(location, " ", 1)] %>%
  .[!str_detect(location, " "), located_pr := location] %>%
  .[!(located_pr %in% exclude_location)]

userinfo[1:5]
```

## 人口校正系数
```{r}
#| label: population_proportion_each_group

# yearbook
pop_yearbook_prop <-
  pop_yearbook_structure[, pop_nation := sum(pop_region, na.rm = T)] %>%
  .[, ':='(pop_0_14_prop = pop_0_14/pop_nation,
           pop_15_64_prop = pop_15_64/pop_nation,
           pop_65_above_prop = pop_65_above/pop_nation)]

pop_yearbook_prop_melt <-
  melt(pop_yearbook_prop[, .(region_cn, pop_0_14_prop, pop_15_64_prop, pop_65_above_prop)],
       id.vars = "region_cn") %>%
  .[, variable := str_replace(variable, "_prop", "")] %>%
  setnames(old = c("region_cn", "variable", "value"),
           new = c("pr", "age_group", "pop_yearbook_prop"))

# sample user
pop_sample_prop <-
  userinfo %>%
  .[, .(pop_sample = .N), by = .(located_pr, age_group)] %>%
  .[, pop_sample_prop := pop_sample/sum(pop_sample, na.rm = T)]

# merge and calculate proportion difference
pop_prop_merge <-
  merge(pop_sample_prop[, .(pr = located_pr, age_group, pop_sample_prop)],
        pop_yearbook_prop_melt,
        by = c("pr", "age_group")) %>%
  # .[, pop_prop_diff := pop_sample_prop-pop_yearbook_prop] %>%
  # .[, rec_tmp := pop_yearbook_prop/pop_sample_prop]
  .[, pop_prop_rec := sqrt(pop_yearbook_prop/pop_sample_prop)]


# trim the weight of rectification    ###
# 截断：中值的0.2和5倍
# pop_prop_merge %>%
#   .[, rec_tmp_median := median(rec_tmp, na.rm = T), by = .(pr)] %>%
#   .[, rec_tmp_status := fcase(rec_tmp == rec_tmp_median, 2,
#                               rec_tmp < rec_tmp_median, 1,
#                               rec_tmp > rec_tmp_median, 3),  by = .(pr)] %>%
#   .[rec_tmp_status == 2, pop_prop_rec := rec_tmp_median] %>%
#   .[rec_tmp_status == 1, pop_prop_rec := fcase(rec_tmp < rec_tmp_median*0.2, rec_tmp_median*0.2,
#                                                rec_tmp >= rec_tmp_median*0.2, rec_tmp)] %>%
#   .[rec_tmp_status == 3, pop_prop_rec := fcase(rec_tmp > rec_tmp_median*5, rec_tmp_median*5,
#                                                rec_tmp <= rec_tmp_median*5, rec_tmp)]


pop_prop_merge[1:5]
```

# 按比例校正出行人数
## 签到数据处理
```{r}
#| label: data_process_2

checkins_nonres_userinfo_adm <-
  merge(checkins_nonres,
        userinfo[, .(userid = as.character(userid), age_group)],
        all.x = T,
        by = "userid") %>%
  .[!is.na(age_group)] %>%
  merge(city_adm[, .(city_join, pr_blog = pr_join, pr_pinyin)],
        all.x = T,
        by.x = "city",
        by.y = "city_join") %>%
  .[!is.na(pr_blog)] %>%
  .[city %in% num_checkins[num_checkins > 3000, city]] %>%
  .[!(city %in% city_abnor[, city])]
```

## 计算各省每日各人群的出行人数
```{r}
#| label: calculate_usercount_pr_popgroup

usercount_popgroup <-
  checkins_nonres_userinfo_adm[, .(usercount = uniqueN(userid)), 
                              by = .(created_at, age_group, pr_blog, pr_pinyin)]
```

## 校正出行人数
```{r}
#| label: recorrect_usercount

usercount_popgroup_rec <-
  merge(usercount_popgroup,
        pop_prop_merge[, .(pr, age_group, pop_prop_rec)],
        all.x = T,
        by.x = c("age_group", "pr_blog"),
        by.y = c("age_group", "pr")) %>%
  .[, usercount_rec_pop := usercount*pop_prop_rec] %>%  ### 
  .[, .(usercount_rec = sum(usercount_rec_pop, na.rm = T)), 
    by = .(pr_blog, pr_pinyin, created_at)] %>%
  .[order(pr_blog, created_at)]


# province level
usercount_pr_rec <-
  usercount_popgroup_rec

# nation level
usercount_na_rec <-
  usercount_popgroup_rec[, .(usercount_rec = sum(usercount_rec)), 
                         by = .(created_at)]
```

## 归一化计算
```{r}
#| label: nor_recorrected_data

userprop_pr_rec_nor <-
  usercount_pr_rec[, userprop_rec_nor := 
                           (usercount_rec-min(usercount_rec))/
                           (max(usercount_rec)-min(usercount_rec)),
                         by = .(pr_blog, pr_pinyin)]

userprop_na_rec_nor <-
  usercount_na_rec[, userprop_rec_nor := 
                     (usercount_rec-min(usercount_rec))/
                           (max(usercount_rec)-min(usercount_rec))]
```

## 7天滑动平均处理
```{r}
#| label: 7MA_rec

userprop_pr_rec_nor[order(pr_blog, created_at),
                    userprop_rec_nor_7MA :=
                      rollmean(userprop_rec_nor, k = 7, fill = NA),
                    by = .(pr_blog, pr_pinyin)]

userprop_na_rec_nor[order(created_at),
                    userprop_rec_nor_7MA :=
                      rollmean(userprop_rec_nor, k = 7, fill = NA)]
```

## 计算相对值
```{r}
#| label: relative_value_recorrect

# province level
baseline_raw_rec_pr <-
  userprop_pr_rec_nor %>%
  .[created_at %in% period_before_covid] %>%
  .[, .(baseline_raw = median(userprop_rec_nor, na.rm = T)), by = .(pr_blog)]

baseline_7MA_rec_pr <-
  userprop_pr_rec_nor %>%
  .[created_at %in% period_before_covid] %>%
  .[, .(baseline_7MA = median(userprop_rec_nor_7MA, na.rm = T)), by = .(pr_blog)]

userprop_rec_pr_relative <-
  merge(userprop_pr_rec_nor,
        baseline_raw_rec_pr,
        all.x = T,
        by = "pr_blog") %>%
  merge(baseline_7MA_rec_pr,
        all.x = T,
        by = "pr_blog") %>%
  .[, userprop_relative := userprop_rec_nor/baseline_raw-1] %>%
  .[, userprop_7MA_relative := userprop_rec_nor_7MA/baseline_7MA-1]

# national level
baseline_raw_rec_na <-
  userprop_na_rec_nor %>%
  .[created_at %in% period_before_covid] %>%
  .[, .(baseline_raw = median(userprop_rec_nor, na.rm = T))]

baseline_7MA_rec_na <-
  userprop_na_rec_nor %>%
  .[created_at %in% period_before_covid] %>%
  .[, .(baseline_7MA = median(userprop_rec_nor_7MA, na.rm = T))]

userprop_rec_na_relative <-
  userprop_na_rec_nor[, ':='(baseline_raw = baseline_raw_rec_na$baseline_raw,
                             baseline_7MA = baseline_7MA_rec_na$baseline_7MA)] %>%
  .[, userprop_relative := userprop_rec_nor/baseline_raw-1] %>%
  .[, userprop_7MA_relative := userprop_rec_nor_7MA/baseline_7MA-1]
```

# 校正后省级比较验证
## 相关性分析
```{r}
CMI_weibo_rec_pr <-
  merge(CMI_pr_nor_relative[, .(pr_join,
                                pr_pinyin,
                                date,
                                CMI_relative,
                                CMI_7MA_relative)], 
        userprop_rec_pr_relative[, .(pr_blog,
                                     created_at,
                                     userprop_relative,
                                     userprop_7MA_relative)], 
        by.x = c("pr_join", "date"),
        by.y = c("pr_blog", "created_at"))

cor_result_rec_pr <-
  CMI_weibo_rec_pr[, .(pr_join, pr_pinyin)] %>%
  unique() %>%
  .[, ':='(cor_value = NA_real_, p_value = NA_real_)]

for(i in 1:nrow(cor_result_rec_pr)){

  pr_analysis <- cor_result_rec_pr[i, pr_join]
  
  pearson_test <-
    cor.test(CMI_weibo_rec_pr[pr_join == pr_analysis, CMI_7MA_relative],
             CMI_weibo_rec_pr[pr_join == pr_analysis, userprop_7MA_relative],
             method = "pearson")
  
  cor_result_rec_pr[i, "cor_value"] <- pearson_test$estimate
  cor_result_rec_pr[i, "p_value"] <- pearson_test$p.value
}
```

## 提取结果
```{r}
#| label: extract_result_pr_rec

# 无需筛选，所有省级行政区都展示
cor_result_rec_pr_filter <-
  cor_result_rec_pr[order(-cor_value)]

# add text
# cor_result_rec_pr_filter %>%
#   .[, ":="(cor_value_round = round(cor_value, digits = 2), 
#            p_value_round = round(p_value, digits = 2))] %>%
#   .[, label := paste0("r= ", str_pad(cor_value_round, 4, "right", "0"),
#                       "\np-value= ", p_value_round)]

cor_result_rec_pr_filter %>%
  .[, cor_value_round := round(cor_value, digits = 2)] %>%
  .[, sign_level := NA_character_]

for(i in 1:nrow(cor_result_rec_pr_filter)){
  cor_result_rec_pr_filter[i, sign_level := cal_sign(p_value)]
}

cor_result_rec_pr_filter[, label := 
                             paste0("*r*",
                                    "<sub>c</sub>", 
                                    " = ", 
                                    str_pad(cor_value_round, 
                                            width = 4, 
                                            side = "right",
                                            pad = "0"), 
                                    "<sup>", sign_level, "</sup>")]

cor_result_rec_pr_filter
```

## 构建绘图数据集 
```{r}
plotdata_rec_pr <-
  merge(CMI_weibo_rec_pr %>%
          setnames(old = c("userprop_relative",
                           "userprop_7MA_relative"),
                   new = c("userprop_rec_relative",
                           "userprop_rec_7MA_relative"),
                   skip_absent = T),
        CMI_weibo_pr[, !c("CMI_relative", "CMI_7MA_relative")],
        all.x = T,
        by = c("pr_join", "date", "pr_pinyin")) %>%
  .[!is.na(CMI_relative) & 
      !is.na(CMI_7MA_relative) &
      !is.na(userprop_relative) &
      !is.na(userprop_7MA_relative) &
      !is.na(userprop_rec_relative) &
      !is.na(userprop_rec_7MA_relative)] %>%
  .[pr_join %in% cor_result_rec_pr_filter[, pr_join]] %>%  ###
  melt(id.vars = c("pr_join", "pr_pinyin", "date")) %>%
  .[, variable := factor(variable,
                         levels = c("CMI_relative",
                                    "CMI_7MA_relative",
                                    "userprop_relative",
                                    "userprop_7MA_relative",
                                    "userprop_rec_relative",
                                    "userprop_rec_7MA_relative"))]


plotdata_cor_result_rec_pr_filter <-
  merge(cor_result_rec_pr_filter[, .(pr_pinyin, label_rec = label)],
        cor_result_pr_filter[, .(pr_pinyin, label_raw = label)],
        all.x = T, 
        by = "pr_pinyin")
  # .[, label := paste0(label_raw, "<br>", label_rec)]

# plotdata_rec_pr <-
#   CMI_weibo_rec_pr[!is.na(CMI_relative) & 
#                    !is.na(CMI_7MA_relative) &
#                    !is.na(userprop_relative) &
#                    !is.na(userprop_7MA_relative)] %>% 
#   .[pr_join %in% cor_result_rec_pr_filter[, pr_join]] %>%  ###
#   melt(id.vars = c("pr_join", "pr_pinyin", "date"))
```



## 绘制结果
```{r}
#| label: plot_pr_rec
#| echo: false
#| warning: false
#| fig-width: 10
#| fig-height: 7
#| fig-dpi: 300


plot_rec_pr <-
  ggplot(plotdata_rec_pr) +
  geom_line(mapping = aes(x = date, 
                          y = value, 
                          color = variable,
                          alpha = variable),
            linewidth = 0.3) +
  # geom_text(data = cor_result_rec_pr_filter,
  #           mapping = aes(x = ymd("2020-05-02"),
  #                         y = 0.6,
  #                         label = label),
  #           size = 2.5,
  #           lineheight = 1,
  #           hjust = "inward") +
  geom_richtext(data = plotdata_cor_result_rec_pr_filter,
                mapping = aes(x = ymd("2020-05-10"), ### 
                              y = 0.8,
                              label = label_raw),
                size = 2.5,
                lineheight = 1,
                hjust = "inward",
                fill = NA,
                label.color = NA) +
  geom_richtext(data = plotdata_cor_result_rec_pr_filter,
                mapping = aes(x = ymd("2020-05-10"), ### 
                              y = 0.4,
                              label = label_rec),
                size = 2.5,
                lineheight = 1,
                hjust = "inward",
                fill = NA,
                label.color = NA) +
  geom_hline(yintercept = 0,
             color = "black",
             linetype = "solid",
             # size = 0.5,
             alpha = 0.5) +
  geom_vline(xintercept = ymd("2020-01-20"), # 官宣人传人
             color = "red",
             linetype = "dashed",
             linewidth = 0.3
             ) +
  # scale_color_manual(values = c("CMI_relative" = "darkorange",
  #                               "CMI_7MA_relative" = "darkorange",
  #                               "userprop_relative" = "deepskyblue",
  #                               "userprop_7MA_relative" = "deepskyblue"),
  #                    labels = c("CMI_relative" = "Baidu index",
  #                               "CMI_7MA_relative" = "Baidu index (7MA)",
  #                               "userprop_relative" = "Weibo index",
  #                               "userprop_7MA_relative" = "Weibo index (7MA)")) +
  # scale_alpha_manual(values = c("CMI_relative" = 0.2,
  #                               "CMI_7MA_relative" = 1,
  #                               "userprop_relative" = 0.2,
  #                               "userprop_7MA_relative" = 1),
  #                    labels = c("CMI_relative" = "Baidu index",
  #                               "CMI_7MA_relative" = "Baidu index (7MA)",
  #                               "userprop_relative" = "Weibo index",
  #                               "userprop_7MA_relative" = "Weibo index (7MA)")) +
  scale_color_manual(values = c("CMI_relative" = pal[2],
                                "CMI_7MA_relative" = pal[2],
                                "userprop_relative" = pal[3],
                                "userprop_7MA_relative" = pal[3],
                                "userprop_rec_relative" = pal[5],
                                "userprop_rec_7MA_relative" = pal[5]),
                     labels = c("CMI_relative" = "Baidu indice",
                                "CMI_7MA_relative" = "Baidu indice (7MA)",
                                "userprop_relative" = "Weibo indice",
                                "userprop_7MA_relative" = "Weibo indice (7MA)",
                                "userprop_rec_relative" = "Weibo indice (corrected)",
                                "userprop_rec_7MA_relative" = "Weibo indice (corrected, 7MA)")) +
  scale_alpha_manual(values = c("CMI_relative" = 0.2,
                                "CMI_7MA_relative" = 1,
                                "userprop_relative" = 0.2,
                                "userprop_7MA_relative" = 1,
                                "userprop_rec_relative" = 0.2,
                                "userprop_rec_7MA_relative" = 1),
                     labels = c("CMI_relative" = "Baidu indice",
                                "CMI_7MA_relative" = "Baidu indice (7MA)",
                                "userprop_relative" = "Weibo indice",
                                "userprop_7MA_relative" = "Weibo indice (7MA)",
                                "userprop_rec_relative" = "Weibo indice (corrected)",
                                "userprop_rec_7MA_relative" = "Weibo indice (corrected, 7MA)")) +
  scale_x_date(breaks = ymd(c("2020-01-01",
                              "2020-02-01",
                              "2020-03-03",
                              "2020-04-01",
                              "2020-05-01")),
               date_labels = "%b") +
  scale_y_continuous(breaks = seq(-1, 1, 0.5),
                     limits = c(-1, 1),
                     labels = c("-100%", "-50%", "0", "+50%", "+100%")) +
  facet_wrap(~ pr_pinyin, ncol = 6) +
  labs(
       # x = "Date",
       y = "Relative change of mobility indice") +
  theme_bw() +
  theme(
        # axis.title.y = element_text(size = 12),
        axis.title.x = element_blank(),
        axis.text = element_text(size = 7),
        legend.title = element_blank(),
        # legend.position = "none",
        legend.position = "bottom",
        # legend.justification = c(0.9, 0.1),
        legend.margin = margin(t = -60, r = -80, b = 10),
        # legend.spacing.x = unit(0.5, 'cm'),
        # legend.key.width = unit(1.5, "cm"),
        # legend.text = element_text(size = 11),
        strip.background = element_rect(fill = NA, color = NA),
        strip.text = element_text(margin = margin(t = -1, b = 3),
                                  size = 8),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.spacing.x = unit(12, "pt")
        ) + 
  guides(colour = guide_legend(nrow = 2, override.aes = list(linewidth = 1)))

plot_rec_pr
```

```{r}
#| label: save_plot_province_rec
#| include: false
#| eval: true

time <-
  str_sub(as.character(now()), start = 1, end = -8) %>%
  str_replace(" ", "_")

filename_temp <- paste0("01_plot_comparison_province_level_recorrected_", time, ".pdf")

ggsave(filename = filename_temp,
       plot = plot_rec_pr,
       path = odir_result,
       width = 180,
       height = 140,  ###
       units = "mm",
       dpi = 300)
```

# 校正后国家级比较验证
## 相关性分析
```{r}
#| label: comparison_nation_level_rec

CMI_weibo_rec_na <-
  merge(CMI_na_nor_relative[, .(date, 
                                CMI_relative,
                                CMI_7MA_relative)], 
        userprop_rec_na_relative[, .(created_at,
                                     userprop_relative,
                                     userprop_7MA_relative)], 
        by.x = c("date"),
        by.y = c("created_at"))

cor_result_rec_na <-
  data.table(cor_value = NA_real_, p_value = NA_real_)
  
cor_result_rec_na[, "cor_value"] <- pearson_test$estimate
cor_result_rec_na[, "p_value"] <- pearson_test$p.value
```

## 提取结果
```{r}
#| label: extract_result_nation_level_rec

# 无需筛选
cor_result_rec_na_filter <-
  cor_result_rec_na

# add text
# cor_result_rec_na_filter %>%
#   .[, ":="(cor_value_round = round(cor_value, digits = 2), 
#            p_value_round = round(p_value, digits = 2))] %>%
#   .[, label := paste0("r= ", str_pad(cor_value_round, 4, "right", "0"),
#                       "\np-value= ", p_value_round)]

cor_result_rec_na_filter %>%
  .[, cor_value_round := round(cor_value, digits = 2)] %>%
  .[, sign_level := NA_character_]

for(i in 1:nrow(cor_result_rec_na_filter)){
  cor_result_rec_na_filter[i, sign_level := cal_sign(p_value)]
}

cor_result_rec_na_filter[, label := 
                       paste0("*r*", "<sub>c</sub>", 
                              " = ", cor_value_round, "<sup>",
                              sign_level, "</sup>")]

cor_result_rec_na_filter
```

## 构建绘图数据集
```{r}
plotdata_rec_na <-
  merge(CMI_weibo_rec_na %>%
          setnames(old = c("userprop_relative",
                           "userprop_7MA_relative"),
                   new = c("userprop_rec_relative",
                           "userprop_rec_7MA_relative"),
                   skip_absent = T),
        CMI_weibo_na[, !c("CMI_relative", "CMI_7MA_relative")],
        all.x = T,
        by = c("date")) %>%
  .[!is.na(CMI_relative) & 
      !is.na(CMI_7MA_relative) &
      !is.na(userprop_relative) &
      !is.na(userprop_7MA_relative) &
      !is.na(userprop_rec_relative) &
      !is.na(userprop_rec_7MA_relative)] %>%
  melt(id.vars = c("date")) %>%
  .[, variable := factor(variable,
                         levels = c("CMI_relative",
                                    "CMI_7MA_relative",
                                    "userprop_relative",
                                    "userprop_7MA_relative",
                                    "userprop_rec_relative",
                                    "userprop_rec_7MA_relative"))]


plotdata_cor_result_rec_na_filter <-
  cbind(cor_result_rec_na_filter[, .(label_rec = label)],
        cor_result_na_filter[, .(label_raw = label)])

# plotdata_rec_na <-
#   CMI_weibo_rec_na[!is.na(CMI_relative) &
#                      !is.na(CMI_7MA_relative) &
#                      !is.na(userprop_relative) &
#                      !is.na(userprop_7MA_relative)] %>%
#   melt(id.vars = c("date"))
```



## 绘制结果
```{r}
#| label: plot_nation_level_rec
#| echo: false
#| warning: false
#| fig-width: 10
#| fig-height: 7
#| fig-dpi: 300

plot_rec_na <-
  ggplot(plotdata_rec_na) +
  geom_line(mapping = aes(x = date, 
                          y = value, 
                          color = variable,
                          alpha = variable),
            linewidth = 0.5) +
  geom_richtext(data = plotdata_cor_result_rec_na_filter,
                mapping = aes(x = ymd("2020-05-10"), ### 
                              y = 0.8,
                              label = label_raw),
                size = 4,
                lineheight = 1,
                hjust = "inward",
                fill = NA,
                label.color = NA) +
  geom_richtext(data = plotdata_cor_result_rec_na_filter,
                mapping = aes(x = ymd("2020-05-10"), ### 
                              y = 0.6,
                              label = label_rec),
                size = 4,
                lineheight = 1,
                hjust = "inward",
                fill = NA,
                label.color = NA) +
  geom_hline(yintercept = 0,
             color = "black",
             linetype = "solid",
             # size = 0.5,
             alpha = 0.5) +
  geom_vline(xintercept = ymd("2020-01-20"), # 官宣人传人
             color = "red",
             linetype = "dashed",
             linewidth = 0.3
             ) +
  scale_color_manual(values = c("CMI_relative" = pal[2],
                                "CMI_7MA_relative" = pal[2],
                                "userprop_relative" = pal[3],
                                "userprop_7MA_relative" = pal[3],
                                "userprop_rec_relative" = pal[5],
                                "userprop_rec_7MA_relative" = pal[5]),
                     labels = c("CMI_relative" = "Baidu indice",
                                "CMI_7MA_relative" = "Baidu indice (7MA)",
                                "userprop_relative" = "Weibo indice",
                                "userprop_7MA_relative" = "Weibo indice (7MA)",
                                "userprop_rec_relative" = "Weibo indice (corrected)",
                                "userprop_rec_7MA_relative" = "Weibo indice (corrected, 7MA)")) +
  scale_alpha_manual(values = c("CMI_relative" = 0.2,
                                "CMI_7MA_relative" = 1,
                                "userprop_relative" = 0.2,
                                "userprop_7MA_relative" = 1,
                                "userprop_rec_relative" = 0.2,
                                "userprop_rec_7MA_relative" = 1),
                     labels = c("CMI_relative" = "Baidu indice",
                                "CMI_7MA_relative" = "Baidu indice (7MA)",
                                "userprop_relative" = "Weibo indice",
                                "userprop_7MA_relative" = "Weibo indice (7MA)",
                                "userprop_rec_relative" = "Weibo indice (corrected)",
                                "userprop_rec_7MA_relative" = "Weibo indice (corrected, 7MA)")) +
  scale_x_date(breaks = ymd(c("2020-01-01",
                              "2020-02-01",
                              "2020-03-03",
                              "2020-04-01",
                              "2020-05-01")),
               date_labels = "%b") +
  scale_y_continuous(breaks = seq(-1, 1, 0.5),
                     limits = c(-1, 1),
                     labels = c("-100%", "-50%", "0", "+50%", "+100%")) +
  labs(y = "Relative change of mobility indice") +
  theme_bw() +
  theme(
        # axis.title.y = element_text(size = 12),
        axis.title.x = element_blank(),
        legend.title = element_blank(),
        legend.position = "right",
        # legend.margin = margin(t = -5),
        legend.spacing.x = unit(0.5, 'cm'),
        legend.key.width = unit(1.5, "cm"),
        # legend.text = element_text(size = 11),
        strip.background = element_rect(fill = NA, color = NA),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.spacing.x = unit(12, "pt")
        ) +
  guides(colour = guide_legend(nrow = 6, override.aes = list(linewidth = 1)))

plot_rec_na
```

```{r}
#| label: save_plot_nation_rec
#| include: false
#| eval: true

time <-
  str_sub(as.character(now()), start = 1, end = -8) %>%
  str_replace(" ", "_")

filename_temp <- paste0("01_plot_comparison_national_level_recorrected_", time, ".pdf")

ggsave(filename = filename_temp,
       plot = plot_rec_na,
       path = odir_result,
       width = 180,
       height = 70,  ###
       units = "mm",
       dpi = 300)
```

最后使用AI合并两幅图






















